
services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: ft_transcendence_frontend
    ports:
      - "443:443"  # HTTPS必須
      - "80:80"     # HTTPからHTTPSにリダイレクト用
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./ssl:/etc/nginx/ssl  # SSL証明書をNginxの正しいパスにマウント
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_started
      ssl-cert:
        condition: service_completed_successfully

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: ft_transcendence_backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./database:/app/database  # SQLite用
    environment:
      - NODE_ENV=development
      - DATABASE_PATH=/app/database/transcendence.db
    depends_on:
      ssl-cert:
        condition: service_completed_successfully

  database:
    image: alpine:latest
    container_name: ft_transcendence_database
    command: tail -f /dev/null  # SQLiteなのでファイルベース、コンテナは永続化のみ
    volumes:
      - ./database:/data
    environment:
      - DB_PATH=/data/transcendence.db

  # 開発用のHTTPS証明書生成
  ssl-cert:
    image: alpine:latest
    container_name: ft_transcendence_ssl
    command: |
      sh -c "
      apk add --no-cache openssl &&
      mkdir -p /certs &&
      if [ ! -f /certs/cert.pem ] || [ ! -f /certs/key.pem ]; then
        echo 'Generating self-signed SSL certificate for development...' &&
        echo 'Detected OpenSSL version:' &&
        openssl version &&
        
        # Check if -addext is supported
        if openssl req -help 2>&1 | grep -q '\-addext'; then
          echo 'Using modern OpenSSL with -addext option...' &&
          openssl req -x509 -newkey rsa:4096 -keyout /certs/key.pem -out /certs/cert.pem -days 365 -nodes \
            -subj '/C=US/ST=Development/L=Local/O=ft_transcendence/CN=localhost' \
            -addext 'subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1'
        else
          echo 'Using config file method for compatibility...' &&
          cat > /tmp/ssl.conf << 'EOF'
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = US
ST = Development
L = Local
O = ft_transcendence
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = *.localhost
IP.1 = 127.0.0.1
IP.2 = ::1
EOF
          openssl req -x509 -newkey rsa:4096 -keyout /certs/key.pem -out /certs/cert.pem -days 365 -nodes \
            -config /tmp/ssl.conf -extensions v3_req &&
          rm -f /tmp/ssl.conf
        fi &&
        chmod 644 /certs/cert.pem &&
        chmod 600 /certs/key.pem &&
        echo 'SSL certificates generated successfully'
      else
        echo 'SSL certificates already exist'
      fi
      "
    volumes:
      - ./ssl:/certs

networks:
  default:
    name: ft_transcendence_network